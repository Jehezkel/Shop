/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAccountClient {
    login(logInCommand: LogInCommand): Observable<JwtSecurityToken>;
    register(registerCommand: RegisterCommand): Observable<RegisterResult>;
}

@Injectable({
    providedIn: 'root'
})
export class AccountClient implements IAccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    login(logInCommand: LogInCommand): Observable<JwtSecurityToken> {
        let url_ = this.baseUrl + "/api/Account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(logInCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<JwtSecurityToken>><any>_observableThrow(e);
                }
            } else
                return <Observable<JwtSecurityToken>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<JwtSecurityToken> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JwtSecurityToken.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<JwtSecurityToken>(<any>null);
    }

    register(registerCommand: RegisterCommand): Observable<RegisterResult> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterResult>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterResult>(<any>null);
    }
}

export interface IImagesClient {
    upload(uploadedImage: FileParameter | null | undefined): Observable<ProductImage>;
}

@Injectable({
    providedIn: 'root'
})
export class ImagesClient implements IImagesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    upload(uploadedImage: FileParameter | null | undefined): Observable<ProductImage> {
        let url_ = this.baseUrl + "/api/Images";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (uploadedImage !== null && uploadedImage !== undefined)
            content_.append("uploadedImage", uploadedImage.data, uploadedImage.fileName ? uploadedImage.fileName : "uploadedImage");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(<any>response_);
                } catch (e) {
                    return <Observable<ProductImage>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductImage>><any>_observableThrow(response_);
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<ProductImage> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductImage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductImage>(<any>null);
    }
}

export interface IProductsClient {
    getProducts(): Observable<ProductListDTO>;
    create(command: CreateProductCommand): Observable<number>;
    getProductDetail(id: number): Observable<ProductDetailsDTO>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getProducts(): Observable<ProductListDTO> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducts(<any>response_);
                } catch (e) {
                    return <Observable<ProductListDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductListDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetProducts(response: HttpResponseBase): Observable<ProductListDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductListDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductListDTO>(<any>null);
    }

    create(command: CreateProductCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getProductDetail(id: number): Observable<ProductDetailsDTO> {
        let url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductDetail(<any>response_);
                } catch (e) {
                    return <Observable<ProductDetailsDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductDetailsDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductDetail(response: HttpResponseBase): Observable<ProductDetailsDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDetailsDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductDetailsDTO>(<any>null);
    }
}

export interface IWeatherForecastClient {
    get(): Observable<WeatherForecast[]>;
}

@Injectable({
    providedIn: 'root'
})
export class WeatherForecastClient implements IWeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export abstract class SecurityToken implements ISecurityToken {

    constructor(data?: ISecurityToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SecurityToken {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'SecurityToken' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ISecurityToken {
}

export class JwtSecurityToken extends SecurityToken implements IJwtSecurityToken {
    actor?: string | undefined;
    audiences?: string[] | undefined;
    claims?: Claim[] | undefined;
    encodedHeader?: string | undefined;
    encodedPayload?: string | undefined;
    header?: JwtHeader | undefined;
    id?: string | undefined;
    issuer?: string | undefined;
    payload?: JwtPayload | undefined;
    innerToken?: JwtSecurityToken | undefined;
    rawAuthenticationTag?: string | undefined;
    rawCiphertext?: string | undefined;
    rawData?: string | undefined;
    rawEncryptedKey?: string | undefined;
    rawInitializationVector?: string | undefined;
    rawHeader?: string | undefined;
    rawPayload?: string | undefined;
    rawSignature?: string | undefined;
    securityKey?: SecurityKey | undefined;
    signatureAlgorithm?: string | undefined;
    signingCredentials?: SigningCredentials | undefined;
    encryptingCredentials?: EncryptingCredentials | undefined;
    signingKey?: SecurityKey | undefined;
    subject?: string | undefined;
    validFrom?: Date;
    validTo?: Date;
    issuedAt?: Date;

    constructor(data?: IJwtSecurityToken) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.actor = _data["actor"];
            if (Array.isArray(_data["audiences"])) {
                this.audiences = [] as any;
                for (let item of _data["audiences"])
                    this.audiences!.push(item);
            }
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(Claim.fromJS(item));
            }
            this.encodedHeader = _data["encodedHeader"];
            this.encodedPayload = _data["encodedPayload"];
            this.header = _data["header"] ? JwtHeader.fromJS(_data["header"]) : <any>undefined;
            this.id = _data["id"];
            this.issuer = _data["issuer"];
            this.payload = _data["payload"] ? JwtPayload.fromJS(_data["payload"]) : <any>undefined;
            this.innerToken = _data["innerToken"] ? JwtSecurityToken.fromJS(_data["innerToken"]) : <any>undefined;
            this.rawAuthenticationTag = _data["rawAuthenticationTag"];
            this.rawCiphertext = _data["rawCiphertext"];
            this.rawData = _data["rawData"];
            this.rawEncryptedKey = _data["rawEncryptedKey"];
            this.rawInitializationVector = _data["rawInitializationVector"];
            this.rawHeader = _data["rawHeader"];
            this.rawPayload = _data["rawPayload"];
            this.rawSignature = _data["rawSignature"];
            this.securityKey = _data["securityKey"] ? SecurityKey.fromJS(_data["securityKey"]) : <any>undefined;
            this.signatureAlgorithm = _data["signatureAlgorithm"];
            this.signingCredentials = _data["signingCredentials"] ? SigningCredentials.fromJS(_data["signingCredentials"]) : <any>undefined;
            this.encryptingCredentials = _data["encryptingCredentials"] ? EncryptingCredentials.fromJS(_data["encryptingCredentials"]) : <any>undefined;
            this.signingKey = _data["signingKey"] ? SecurityKey.fromJS(_data["signingKey"]) : <any>undefined;
            this.subject = _data["subject"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.issuedAt = _data["issuedAt"] ? new Date(_data["issuedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): JwtSecurityToken {
        data = typeof data === 'object' ? data : {};
        let result = new JwtSecurityToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actor"] = this.actor;
        if (Array.isArray(this.audiences)) {
            data["audiences"] = [];
            for (let item of this.audiences)
                data["audiences"].push(item);
        }
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["encodedHeader"] = this.encodedHeader;
        data["encodedPayload"] = this.encodedPayload;
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["issuer"] = this.issuer;
        data["payload"] = this.payload ? this.payload.toJSON() : <any>undefined;
        data["innerToken"] = this.innerToken ? this.innerToken.toJSON() : <any>undefined;
        data["rawAuthenticationTag"] = this.rawAuthenticationTag;
        data["rawCiphertext"] = this.rawCiphertext;
        data["rawData"] = this.rawData;
        data["rawEncryptedKey"] = this.rawEncryptedKey;
        data["rawInitializationVector"] = this.rawInitializationVector;
        data["rawHeader"] = this.rawHeader;
        data["rawPayload"] = this.rawPayload;
        data["rawSignature"] = this.rawSignature;
        data["securityKey"] = this.securityKey ? this.securityKey.toJSON() : <any>undefined;
        data["signatureAlgorithm"] = this.signatureAlgorithm;
        data["signingCredentials"] = this.signingCredentials ? this.signingCredentials.toJSON() : <any>undefined;
        data["encryptingCredentials"] = this.encryptingCredentials ? this.encryptingCredentials.toJSON() : <any>undefined;
        data["signingKey"] = this.signingKey ? this.signingKey.toJSON() : <any>undefined;
        data["subject"] = this.subject;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["issuedAt"] = this.issuedAt ? this.issuedAt.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IJwtSecurityToken extends ISecurityToken {
    actor?: string | undefined;
    audiences?: string[] | undefined;
    claims?: Claim[] | undefined;
    encodedHeader?: string | undefined;
    encodedPayload?: string | undefined;
    header?: JwtHeader | undefined;
    id?: string | undefined;
    issuer?: string | undefined;
    payload?: JwtPayload | undefined;
    innerToken?: JwtSecurityToken | undefined;
    rawAuthenticationTag?: string | undefined;
    rawCiphertext?: string | undefined;
    rawData?: string | undefined;
    rawEncryptedKey?: string | undefined;
    rawInitializationVector?: string | undefined;
    rawHeader?: string | undefined;
    rawPayload?: string | undefined;
    rawSignature?: string | undefined;
    securityKey?: SecurityKey | undefined;
    signatureAlgorithm?: string | undefined;
    signingCredentials?: SigningCredentials | undefined;
    encryptingCredentials?: EncryptingCredentials | undefined;
    signingKey?: SecurityKey | undefined;
    subject?: string | undefined;
    validFrom?: Date;
    validTo?: Date;
    issuedAt?: Date;
}

export class Claim implements IClaim {
    issuer?: string;
    originalIssuer?: string;
    properties?: { [key: string]: string; };
    subject?: ClaimsIdentity | undefined;
    type?: string;
    value?: string;
    valueType?: string;

    constructor(data?: IClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.issuer = _data["issuer"];
            this.originalIssuer = _data["originalIssuer"];
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        this.properties![key] = _data["properties"][key];
                }
            }
            this.subject = _data["subject"] ? ClaimsIdentity.fromJS(_data["subject"]) : <any>undefined;
            this.type = _data["type"];
            this.value = _data["value"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): Claim {
        data = typeof data === 'object' ? data : {};
        let result = new Claim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["issuer"] = this.issuer;
        data["originalIssuer"] = this.originalIssuer;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        data["subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        data["valueType"] = this.valueType;
        return data; 
    }
}

export interface IClaim {
    issuer?: string;
    originalIssuer?: string;
    properties?: { [key: string]: string; };
    subject?: ClaimsIdentity | undefined;
    type?: string;
    value?: string;
    valueType?: string;
}

export class ClaimsIdentity implements IClaimsIdentity {
    authenticationType?: string | undefined;
    isAuthenticated?: boolean;
    actor?: ClaimsIdentity | undefined;
    bootstrapContext?: any | undefined;
    claims?: Claim[];
    label?: string | undefined;
    name?: string | undefined;
    nameClaimType?: string;
    roleClaimType?: string;

    constructor(data?: IClaimsIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authenticationType = _data["authenticationType"];
            this.isAuthenticated = _data["isAuthenticated"];
            this.actor = _data["actor"] ? ClaimsIdentity.fromJS(_data["actor"]) : <any>undefined;
            this.bootstrapContext = _data["bootstrapContext"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(Claim.fromJS(item));
            }
            this.label = _data["label"];
            this.name = _data["name"];
            this.nameClaimType = _data["nameClaimType"];
            this.roleClaimType = _data["roleClaimType"];
        }
    }

    static fromJS(data: any): ClaimsIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimsIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        data["actor"] = this.actor ? this.actor.toJSON() : <any>undefined;
        data["bootstrapContext"] = this.bootstrapContext;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["label"] = this.label;
        data["name"] = this.name;
        data["nameClaimType"] = this.nameClaimType;
        data["roleClaimType"] = this.roleClaimType;
        return data; 
    }
}

export interface IClaimsIdentity {
    authenticationType?: string | undefined;
    isAuthenticated?: boolean;
    actor?: ClaimsIdentity | undefined;
    bootstrapContext?: any | undefined;
    claims?: Claim[];
    label?: string | undefined;
    name?: string | undefined;
    nameClaimType?: string;
    roleClaimType?: string;
}

export class JwtHeader implements IJwtHeader {
    alg?: string | undefined;
    cty?: string | undefined;
    enc?: string | undefined;
    encryptingCredentials?: EncryptingCredentials | undefined;
    iV?: string | undefined;
    kid?: string | undefined;
    signingCredentials?: SigningCredentials | undefined;
    typ?: string | undefined;
    x5t?: string | undefined;
    zip?: string | undefined;

    [key: string]: any; 

    constructor(data?: IJwtHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.alg = _data["Alg"];
            this.cty = _data["Cty"];
            this.enc = _data["Enc"];
            this.encryptingCredentials = _data["EncryptingCredentials"] ? EncryptingCredentials.fromJS(_data["EncryptingCredentials"]) : <any>undefined;
            this.iV = _data["IV"];
            this.kid = _data["Kid"];
            this.signingCredentials = _data["SigningCredentials"] ? SigningCredentials.fromJS(_data["SigningCredentials"]) : <any>undefined;
            this.typ = _data["Typ"];
            this.x5t = _data["X5t"];
            this.zip = _data["Zip"];
        }
    }

    static fromJS(data: any): JwtHeader {
        data = typeof data === 'object' ? data : {};
        let result = new JwtHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["Alg"] = this.alg;
        data["Cty"] = this.cty;
        data["Enc"] = this.enc;
        data["EncryptingCredentials"] = this.encryptingCredentials ? this.encryptingCredentials.toJSON() : <any>undefined;
        data["IV"] = this.iV;
        data["Kid"] = this.kid;
        data["SigningCredentials"] = this.signingCredentials ? this.signingCredentials.toJSON() : <any>undefined;
        data["Typ"] = this.typ;
        data["X5t"] = this.x5t;
        data["Zip"] = this.zip;
        return data; 
    }
}

export interface IJwtHeader {
    alg?: string | undefined;
    cty?: string | undefined;
    enc?: string | undefined;
    encryptingCredentials?: EncryptingCredentials | undefined;
    iV?: string | undefined;
    kid?: string | undefined;
    signingCredentials?: SigningCredentials | undefined;
    typ?: string | undefined;
    x5t?: string | undefined;
    zip?: string | undefined;

    [key: string]: any; 
}

export class EncryptingCredentials implements IEncryptingCredentials {
    alg?: string | undefined;
    enc?: string | undefined;
    cryptoProviderFactory?: CryptoProviderFactory | undefined;
    key?: SecurityKey | undefined;

    constructor(data?: IEncryptingCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.alg = _data["alg"];
            this.enc = _data["enc"];
            this.cryptoProviderFactory = _data["cryptoProviderFactory"] ? CryptoProviderFactory.fromJS(_data["cryptoProviderFactory"]) : <any>undefined;
            this.key = _data["key"] ? SecurityKey.fromJS(_data["key"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EncryptingCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new EncryptingCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alg"] = this.alg;
        data["enc"] = this.enc;
        data["cryptoProviderFactory"] = this.cryptoProviderFactory ? this.cryptoProviderFactory.toJSON() : <any>undefined;
        data["key"] = this.key ? this.key.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEncryptingCredentials {
    alg?: string | undefined;
    enc?: string | undefined;
    cryptoProviderFactory?: CryptoProviderFactory | undefined;
    key?: SecurityKey | undefined;
}

export class CryptoProviderFactory implements ICryptoProviderFactory {
    cryptoProviderCache?: CryptoProviderCache | undefined;
    customCryptoProvider?: ICryptoProvider | undefined;
    cacheSignatureProviders?: boolean;

    constructor(data?: ICryptoProviderFactory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.cacheSignatureProviders = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cryptoProviderCache = _data["cryptoProviderCache"] ? CryptoProviderCache.fromJS(_data["cryptoProviderCache"]) : <any>undefined;
            this.customCryptoProvider = _data["customCryptoProvider"] ? ICryptoProvider.fromJS(_data["customCryptoProvider"]) : <any>undefined;
            this.cacheSignatureProviders = _data["cacheSignatureProviders"] !== undefined ? _data["cacheSignatureProviders"] : true;
        }
    }

    static fromJS(data: any): CryptoProviderFactory {
        data = typeof data === 'object' ? data : {};
        let result = new CryptoProviderFactory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cryptoProviderCache"] = this.cryptoProviderCache ? this.cryptoProviderCache.toJSON() : <any>undefined;
        data["customCryptoProvider"] = this.customCryptoProvider ? this.customCryptoProvider.toJSON() : <any>undefined;
        data["cacheSignatureProviders"] = this.cacheSignatureProviders;
        return data; 
    }
}

export interface ICryptoProviderFactory {
    cryptoProviderCache?: CryptoProviderCache | undefined;
    customCryptoProvider?: ICryptoProvider | undefined;
    cacheSignatureProviders?: boolean;
}

export abstract class CryptoProviderCache implements ICryptoProviderCache {

    constructor(data?: ICryptoProviderCache) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CryptoProviderCache {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CryptoProviderCache' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ICryptoProviderCache {
}

export abstract class ICryptoProvider implements IICryptoProvider {

    constructor(data?: IICryptoProvider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ICryptoProvider {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICryptoProvider' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IICryptoProvider {
}

export abstract class SecurityKey implements ISecurityKey {
    keyId?: string | undefined;
    cryptoProviderFactory?: CryptoProviderFactory | undefined;

    constructor(data?: ISecurityKey) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.keyId = _data["keyId"];
            this.cryptoProviderFactory = _data["cryptoProviderFactory"] ? CryptoProviderFactory.fromJS(_data["cryptoProviderFactory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecurityKey {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'SecurityKey' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyId"] = this.keyId;
        data["cryptoProviderFactory"] = this.cryptoProviderFactory ? this.cryptoProviderFactory.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISecurityKey {
    keyId?: string | undefined;
    cryptoProviderFactory?: CryptoProviderFactory | undefined;
}

export class SigningCredentials implements ISigningCredentials {
    algorithm?: string | undefined;
    digest?: string | undefined;
    cryptoProviderFactory?: CryptoProviderFactory | undefined;
    key?: SecurityKey | undefined;
    kid?: string | undefined;

    constructor(data?: ISigningCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.algorithm = _data["algorithm"];
            this.digest = _data["digest"];
            this.cryptoProviderFactory = _data["cryptoProviderFactory"] ? CryptoProviderFactory.fromJS(_data["cryptoProviderFactory"]) : <any>undefined;
            this.key = _data["key"] ? SecurityKey.fromJS(_data["key"]) : <any>undefined;
            this.kid = _data["kid"];
        }
    }

    static fromJS(data: any): SigningCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new SigningCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["algorithm"] = this.algorithm;
        data["digest"] = this.digest;
        data["cryptoProviderFactory"] = this.cryptoProviderFactory ? this.cryptoProviderFactory.toJSON() : <any>undefined;
        data["key"] = this.key ? this.key.toJSON() : <any>undefined;
        data["kid"] = this.kid;
        return data; 
    }
}

export interface ISigningCredentials {
    algorithm?: string | undefined;
    digest?: string | undefined;
    cryptoProviderFactory?: CryptoProviderFactory | undefined;
    key?: SecurityKey | undefined;
    kid?: string | undefined;
}

export class JwtPayload implements IJwtPayload {
    actort?: string | undefined;
    acr?: string | undefined;
    amr?: string[] | undefined;
    authTime?: number | undefined;
    aud?: string[] | undefined;
    azp?: string | undefined;
    cHash?: string | undefined;
    exp?: number | undefined;
    jti?: string | undefined;
    iat?: number | undefined;
    iss?: string | undefined;
    nbf?: number | undefined;
    nonce?: string | undefined;
    sub?: string | undefined;
    validFrom?: Date;
    validTo?: Date;
    issuedAt?: Date;
    claims?: Claim[] | undefined;

    [key: string]: any; 

    constructor(data?: IJwtPayload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.actort = _data["Actort"];
            this.acr = _data["Acr"];
            if (Array.isArray(_data["Amr"])) {
                this.amr = [] as any;
                for (let item of _data["Amr"])
                    this.amr!.push(item);
            }
            this.authTime = _data["AuthTime"];
            if (Array.isArray(_data["Aud"])) {
                this.aud = [] as any;
                for (let item of _data["Aud"])
                    this.aud!.push(item);
            }
            this.azp = _data["Azp"];
            this.cHash = _data["CHash"];
            this.exp = _data["Exp"];
            this.jti = _data["Jti"];
            this.iat = _data["Iat"];
            this.iss = _data["Iss"];
            this.nbf = _data["Nbf"];
            this.nonce = _data["Nonce"];
            this.sub = _data["Sub"];
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>undefined;
            this.validTo = _data["ValidTo"] ? new Date(_data["ValidTo"].toString()) : <any>undefined;
            this.issuedAt = _data["IssuedAt"] ? new Date(_data["IssuedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["Claims"])) {
                this.claims = [] as any;
                for (let item of _data["Claims"])
                    this.claims!.push(Claim.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JwtPayload {
        data = typeof data === 'object' ? data : {};
        let result = new JwtPayload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["Actort"] = this.actort;
        data["Acr"] = this.acr;
        if (Array.isArray(this.amr)) {
            data["Amr"] = [];
            for (let item of this.amr)
                data["Amr"].push(item);
        }
        data["AuthTime"] = this.authTime;
        if (Array.isArray(this.aud)) {
            data["Aud"] = [];
            for (let item of this.aud)
                data["Aud"].push(item);
        }
        data["Azp"] = this.azp;
        data["CHash"] = this.cHash;
        data["Exp"] = this.exp;
        data["Jti"] = this.jti;
        data["Iat"] = this.iat;
        data["Iss"] = this.iss;
        data["Nbf"] = this.nbf;
        data["Nonce"] = this.nonce;
        data["Sub"] = this.sub;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["ValidTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["IssuedAt"] = this.issuedAt ? this.issuedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.claims)) {
            data["Claims"] = [];
            for (let item of this.claims)
                data["Claims"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJwtPayload {
    actort?: string | undefined;
    acr?: string | undefined;
    amr?: string[] | undefined;
    authTime?: number | undefined;
    aud?: string[] | undefined;
    azp?: string | undefined;
    cHash?: string | undefined;
    exp?: number | undefined;
    jti?: string | undefined;
    iat?: number | undefined;
    iss?: string | undefined;
    nbf?: number | undefined;
    nonce?: string | undefined;
    sub?: string | undefined;
    validFrom?: Date;
    validTo?: Date;
    issuedAt?: Date;
    claims?: Claim[] | undefined;

    [key: string]: any; 
}

export class LogInCommand implements ILogInCommand {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILogInCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LogInCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LogInCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILogInCommand {
    email?: string | undefined;
    password?: string | undefined;
}

export class RegisterResult implements IRegisterResult {
    error?: string | undefined;
    success?: boolean;

    constructor(data?: IRegisterResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error = _data["error"];
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): RegisterResult {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error"] = this.error;
        data["success"] = this.success;
        return data; 
    }
}

export interface IRegisterResult {
    error?: string | undefined;
    success?: boolean;
}

export class RegisterCommand implements IRegisterCommand {
    email?: string | undefined;
    password?: string | undefined;
    userName?: string | undefined;

    constructor(data?: IRegisterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): RegisterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IRegisterCommand {
    email?: string | undefined;
    password?: string | undefined;
    userName?: string | undefined;
}

export abstract class BaseEntity implements IBaseEntity {
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    modifiedBy?: string | undefined;
    createdBy?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.modifiedBy = _data["modifiedBy"];
            this.createdBy = _data["createdBy"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["modifiedBy"] = this.modifiedBy;
        data["createdBy"] = this.createdBy;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IBaseEntity {
    createdDate?: Date | undefined;
    modifiedDate?: Date | undefined;
    modifiedBy?: string | undefined;
    createdBy?: string | undefined;
    isDeleted?: boolean;
}

export class ProductImage extends BaseEntity implements IProductImage {
    productImageId?: number;
    imageName?: string | undefined;
    imageOrder?: number;
    isMainImage?: boolean;
    productId?: number | undefined;
    fullFilePath?: string | undefined;
    product?: Product | undefined;

    constructor(data?: IProductImage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productImageId = _data["productImageId"];
            this.imageName = _data["imageName"];
            this.imageOrder = _data["imageOrder"];
            this.isMainImage = _data["isMainImage"];
            this.productId = _data["productId"];
            this.fullFilePath = _data["fullFilePath"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductImage {
        data = typeof data === 'object' ? data : {};
        let result = new ProductImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productImageId"] = this.productImageId;
        data["imageName"] = this.imageName;
        data["imageOrder"] = this.imageOrder;
        data["isMainImage"] = this.isMainImage;
        data["productId"] = this.productId;
        data["fullFilePath"] = this.fullFilePath;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IProductImage extends IBaseEntity {
    productImageId?: number;
    imageName?: string | undefined;
    imageOrder?: number;
    isMainImage?: boolean;
    productId?: number | undefined;
    fullFilePath?: string | undefined;
    product?: Product | undefined;
}

export class Product extends BaseEntity implements IProduct {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productDescription?: ProductDescription | undefined;
    productImages?: ProductImage[] | undefined;

    constructor(data?: IProduct) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.price = _data["price"];
            this.productDescription = _data["productDescription"] ? ProductDescription.fromJS(_data["productDescription"]) : <any>undefined;
            if (Array.isArray(_data["productImages"])) {
                this.productImages = [] as any;
                for (let item of _data["productImages"])
                    this.productImages!.push(ProductImage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["productDescription"] = this.productDescription ? this.productDescription.toJSON() : <any>undefined;
        if (Array.isArray(this.productImages)) {
            data["productImages"] = [];
            for (let item of this.productImages)
                data["productImages"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProduct extends IBaseEntity {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productDescription?: ProductDescription | undefined;
    productImages?: ProductImage[] | undefined;
}

export class ProductDescription extends BaseEntity implements IProductDescription {
    productId?: number;
    description?: string | undefined;
    product?: Product | undefined;

    constructor(data?: IProductDescription) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productId = _data["productId"];
            this.description = _data["description"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductDescription {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["description"] = this.description;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IProductDescription extends IBaseEntity {
    productId?: number;
    description?: string | undefined;
    product?: Product | undefined;
}

export class ProductListDTO implements IProductListDTO {
    products?: ProductDTO[] | undefined;

    constructor(data?: IProductListDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(ProductDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductListDTO {
    products?: ProductDTO[] | undefined;
}

export class ProductDTO implements IProductDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImage?: string | undefined;

    constructor(data?: IProductDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.price = _data["price"];
            this.productImage = _data["productImage"];
        }
    }

    static fromJS(data: any): ProductDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["productImage"] = this.productImage;
        return data; 
    }
}

export interface IProductDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImage?: string | undefined;
}

export class CreateProductCommand implements ICreateProductCommand {
    productName?: string | undefined;
    price?: number;
    productDescription?: string | undefined;
    images?: ProductImage[] | undefined;

    constructor(data?: ICreateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productName = _data["productName"];
            this.price = _data["price"];
            this.productDescription = _data["productDescription"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(ProductImage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["productDescription"] = this.productDescription;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateProductCommand {
    productName?: string | undefined;
    price?: number;
    productDescription?: string | undefined;
    images?: ProductImage[] | undefined;
}

export class ProductDetailsDTO implements IProductDetailsDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImages?: ProductImage[] | undefined;
    productDescription?: string | undefined;

    constructor(data?: IProductDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.price = _data["price"];
            if (Array.isArray(_data["productImages"])) {
                this.productImages = [] as any;
                for (let item of _data["productImages"])
                    this.productImages!.push(ProductImage.fromJS(item));
            }
            this.productDescription = _data["productDescription"];
        }
    }

    static fromJS(data: any): ProductDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["price"] = this.price;
        if (Array.isArray(this.productImages)) {
            data["productImages"] = [];
            for (let item of this.productImages)
                data["productImages"].push(item.toJSON());
        }
        data["productDescription"] = this.productDescription;
        return data; 
    }
}

export interface IProductDetailsDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImages?: ProductImage[] | undefined;
    productDescription?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}